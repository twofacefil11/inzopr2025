cker lets see
int export_image(char *filename, Image *image, ExportFormat FORMAT) {
  int quality = 100;
  char full_path[512]; // Buffer for filename + extension

  fprintf(stderr, "1");

  size_t image_size = image->channels * image->width * image->height;
  unsigned char *pixels_copy = malloc(image_size);

  if (!pixels_copy)
    return 0; // nie udaos ie zmallocowac

  fprintf(stderr, "2");
  memcpy(pixels_copy, image->pixels, image_size);

  // for (int i = 0; i < image->width * image->height; ++i) {
  //   unsigned char *px = &pixels_copy[i * image->channels];
  //   unsigned char tmp = px[0];
  //   px[0] = px[2];
  //   px[2] = tmp;
  // }

  fprintf(stderr, "4");

  switch (FORMAT) {
  case PNG:
    snprintf(full_path, sizeof(full_path), "%s.png", filename);
    stbi_write_png(full_path, image->width, image->height, 4, pixels_copy,
                   image->width * 4);
    break;

  case JPG:
    snprintf(full_path, sizeof(full_path), "%s.jpg", filename);
    stbi_write_jpg(full_path, image->width, image->height, 4, pixels_copy,
                   quality);
    break;

  case BMP:
    snprintf(full_path, sizeof(full_path), "%s.bmp", filename);
    stbi_write_bmp(full_path, image->width, image->height, 4, pixels_copy);
    break;

  case TGA:
    snprintf(full_path, sizeof(full_path), "%s.tga", filename);
    stbi_write_tga(full_path, image->width, image->height, 4, pixels_copy);
    break;

  case HDR:
    snprintf(full_path, sizeof(full_path), "%s.hdr", filename);
    stbi_write_hdr(full_path, image->width, image->height, 4,
                   (float *)pixels_copy);
    break;
  }
  free(pixels_copy);
  return 1;
}
